// define a function that returns f(g(h)) for f, g, functions and h number
composefun => @(f, g, h)
    make f : func(1, 1)
    make g : func(1, 1)
// can be also `!!    return h g f`
    return f(g(h))

// dblp function : double param plus one
dblp => @(a)
    return a + a + 1

// trpl function : triple but if a = 2 modify ret value (one)
trpl => @(a)
    b(a + a + a)
    if (a == 2)
        b(1)
        if (b == 1)
            b(2)
        end
    end
    return b

// getaddr function : return address of a function
getaddr => @(f)
    make f : func(??, ??)
    return f

// make a variable that is 6
// same as `!! 6 gasan`
gasan(6)

// load into gasan the address of composefun
// same as `!! composefun getaddr gasan`
gasan(getaddr(composefun))

// load into horia the address of gasan
// using pipes(-ish) with old syntax
!! gasan getaddr horia
// or noromally
// horia(getaddr(gasan))

// let compiler know that horia is a function and it's signature
make horia : func(3, 1)

// !! 1 _ _dblp _trpl 2 horia call
call(1, horia(dblp, trpl, 2))